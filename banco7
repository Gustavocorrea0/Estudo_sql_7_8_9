---------------------------|1 - Soma|-------------------------------------

create or replace function somar(a int, b int) returns int as $$

begin 

	return a + b;

end;

$$ language plpgsql;

select somar(10, 10);

---------------------------|2 - Número Absoluto|--------------------------

create or replace function calc_numero_absoluto(b int) returns int as $$

begin

	return abs(b);

end;

$$ language plpgsql;

select calc_numero_absoluto(-8);

---------------------------|3 - Numero Primo|-------------------------------------

create or replace function testar_numero_primo(x int) returns boolean as $$

	declare i int := 2;

	begin

		if x < 0 then

			return false;

		end if;


		while i <= sqrt(x) loop

			if x % i = 0 then

			return false;

		end if;

		i := i + 1;

		end loop;

		return true;

	end;

	$$ language plpgsql;


select testar_numero_primo(6);

---------------------------|4 - Data|-------------------------------------

create or replace function conversao_de_data(datas text) returns text as $$

	declare data_com_correcao text;

begin

	data_com_correcao := to_char(to_date(datas, 'dd/mm/yyyy'), 'yyyy-mm-dd');

	return data_com_correcao;

end;

$$ language plpgsql;

select conversao_de_data('04/06/2023');

---------------------------|5 - media ponderada|-------------------------------------

create or replace function calculo_de_media(parametro1 int, parametro2 int, parametro3 int) returns int as $$

begin

	return ((parametro1 + parametro2)/2) * parametro3;

end;

$$ language plpgsql;

select calculo_de_media(1, 10, 3)

---------------------------|6 - Testar senha|-------------------------------------

create or replace function teste_senha(senha varchar) returns boolean as $$

begin

	if length(senha) < 8 then

		return false;

	end if;


	if not senha ~ '[a-z]' then

		return false;

	end if;


	if not senha ~ '[A-Z]' then

		return false;

	end if;


	if not senha ~ '[0-9]' then

		return false;

	end if;


	return true;

end;

$$ language plpgsql;

select teste_senha('ExTr@m4mªnte_dIf!c1l');

---------------------------|7 - Nome completo|-------------------------------------

create or replace function retorna_primeiro_nome(nome varchar) returns varchar as $$

declare

	primeiro_nome varchar;

begin

	if nome is null or nome = '' then

		return null;

	end if;

	primeiro_nome := substring(nome from 1 for position('' in nome) - 1);

	return primeiro_nome;

end;

$$ language plpgsql;

select retorna_primeiro_nome('gustavo alfredo');

---------------------------|8 - Numero Romano|-------------------------------------

create or replace function conversao_para_romano(numero_romano varchar) returns integer as $$

declare

	letra_atual CHAR;

    valor_atual INTEGER;

    numero_decimal INTEGER := 0;

    ultimo_valor INTEGER := 0;

    i INTEGER;

    valor_anterior INTEGER;

begin

	if numero_romano is null or numero_romano = '' then

		return null;

	end if;

for i in reverse 1..length(numero_romano) loop

	letra_atual := substring(numero_romano, i, 1);


	case letra_atual

		when 'I' then valor_atual :=1;

		when 'V' then valor_atual :=5;

		when 'X' then valor_atual :=10;

		when 'L' then valor_atual :=50;

		when 'C' then valor_atual :=100;

		when 'D' then valor_atual :=500;

		when 'M' then valor_atual :=1000;

		else raise exception 'numero inválido';

	end case;


	if valor_atual >= ultimo_valor then

		numero_decimal := numero_decimal + valor_atual;

	else

		numero_decimal := numero_decimal - valor_atual;

	end if;

		ultimo_valor := valor_atual;

	end loop;

	return numero_decimal;

end;

$$ language plpgsql;

select conversao_para_romano('V');

---------------------------|9 - Soma|-------------------------------------

create or replace function somar_numeros(lista_numeros VARCHAR) returns INTEGER as $$

declare

    soma INTEGER := 0;

    numero VARCHAR;

begin

    if lista_numeros is NULL or lista_numeros = '' then

        return NULL;

    end if;

    for numero in select regexp_split_to_table(lista_numeros, ',') loop

        soma := soma + cast(numero as INTEGER);

    end loop;

    return soma;

END;

$$

LANGUAGE plpgsql;

SELECT somar_numeros('89,43,123');
